Gram√°tica

    0 $accept: translation_unit $end

    1 translation_unit: node_decl
    2                 | translation_unit node_decl

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list '}'
    4          | NODE IDENTIFIER '{' '}'
    5          | IDENTIFIER colon_comma expression term_opt

    6 colon_comma: ':'
    7            | ','

    8 node_decl_item_list: node_decl_item
    9                    | node_decl_item_list node_decl_item

   10 node_decl_item: IDENTIFIER '=' expression ';'
   11               | IDENTIFIER '=' STRING ';'

   12 primary_expression: IDENTIFIER
   13                   | '@' IDENTIFIER
   14                   | VARIABLE
   15                   | INTEGER
   16                   | DOUBLE
   17                   | '(' expression ')'

   18 postfix_expression: primary_expression
   19                   | IDENTIFIER '(' argument_expression_list ')'
   20                   | IDENTIFIER '(' ')'

   21 argument_expression_list: conditional_expression
   22                         | argument_expression_list ',' conditional_expression

   23 unary_expression: postfix_expression
   24                 | '+' unary_expression
   25                 | '-' unary_expression
   26                 | '!' unary_expression
   27                 | LOGNOT unary_expression

   28 multiplicative_expression: unary_expression
   29                          | multiplicative_expression '*' unary_expression
   30                          | multiplicative_expression '/' unary_expression

   31 additive_expression: multiplicative_expression
   32                    | additive_expression '+' multiplicative_expression
   33                    | additive_expression '-' multiplicative_expression

   34 relational_expression: additive_expression
   35                      | relational_expression '<' additive_expression
   36                      | relational_expression '>' additive_expression
   37                      | relational_expression LTEQ additive_expression
   38                      | relational_expression GTEQ additive_expression

   39 equality_expression: relational_expression
   40                    | equality_expression EQUAL relational_expression
   41                    | equality_expression NOT_EQUAL relational_expression

   42 logical_and_expression: equality_expression
   43                       | logical_and_expression LOGAND equality_expression

   44 logical_or_expression: logical_and_expression
   45                      | logical_or_expression LOGOR logical_and_expression

   46 logical_xor_expression: logical_or_expression
   47                       | logical_xor_expression LOGXOR logical_or_expression
   48                       | logical_xor_expression '^' logical_or_expression

   49 conditional_expression: logical_xor_expression
   50                       | logical_xor_expression '?' expression ':' conditional_expression

   51 expression: conditional_expression

   52 term_opt: %empty
   53         | ';'


Terminales con las reglas donde aparecen

$end (0) 0
'!' (33) 26
'(' (40) 17 19 20
')' (41) 17 19 20
'*' (42) 29
'+' (43) 24 32
',' (44) 7 22
'-' (45) 25 33
'/' (47) 30
':' (58) 6 50
';' (59) 10 11 53
'<' (60) 35
'=' (61) 10 11
'>' (62) 36
'?' (63) 50
'@' (64) 13
'^' (94) 48
'{' (123) 3 4
'}' (125) 3 4
error (256)
IDENTIFIER (258) 3 4 5 10 11 12 13 19 20
VARIABLE (259) 14
STRING (260) 11
DOUBLE (261) 16
INTEGER (262) 15
LOGAND (263) 43
LOGOR (264) 45
LOGXOR (265) 47
LOGNOT (266) 27
EQUAL (267) 40
NOT_EQUAL (268) 41
NODE (269) 3 4
GTEQ (270) 38
LTEQ (271) 37


No terminales con las reglas donde aparecen

$accept (35)
    en la izquierda: 0
translation_unit (36)
    en la izquierda: 1 2, en la derecha: 0 2
node_decl (37)
    en la izquierda: 3 4 5, en la derecha: 1 2
colon_comma (38)
    en la izquierda: 6 7, en la derecha: 5
node_decl_item_list (39)
    en la izquierda: 8 9, en la derecha: 3 9
node_decl_item (40)
    en la izquierda: 10 11, en la derecha: 8 9
primary_expression (41)
    en la izquierda: 12 13 14 15 16 17, en la derecha: 18
postfix_expression (42)
    en la izquierda: 18 19 20, en la derecha: 23
argument_expression_list (43)
    en la izquierda: 21 22, en la derecha: 19 22
unary_expression (44)
    en la izquierda: 23 24 25 26 27, en la derecha: 24 25 26 27 28
    29 30
multiplicative_expression (45)
    en la izquierda: 28 29 30, en la derecha: 29 30 31 32 33
additive_expression (46)
    en la izquierda: 31 32 33, en la derecha: 32 33 34 35 36 37 38
relational_expression (47)
    en la izquierda: 34 35 36 37 38, en la derecha: 35 36 37 38 39
    40 41
equality_expression (48)
    en la izquierda: 39 40 41, en la derecha: 40 41 42 43
logical_and_expression (49)
    en la izquierda: 42 43, en la derecha: 43 44 45
logical_or_expression (50)
    en la izquierda: 44 45, en la derecha: 45 46 47 48
logical_xor_expression (51)
    en la izquierda: 46 47 48, en la derecha: 47 48 49 50
conditional_expression (52)
    en la izquierda: 49 50, en la derecha: 21 22 50 51
expression (53)
    en la izquierda: 51, en la derecha: 5 10 17 50
term_opt (54)
    en la izquierda: 52 53, en la derecha: 5


Estado 0

    0 $accept: . translation_unit $end

    IDENTIFIER  desplazar e ir al estado 1
    NODE        desplazar e ir al estado 2

    translation_unit  ir al estado 3
    node_decl         ir al estado 4


Estado 1

    5 node_decl: IDENTIFIER . colon_comma expression term_opt

    ':'  desplazar e ir al estado 5
    ','  desplazar e ir al estado 6

    colon_comma  ir al estado 7


Estado 2

    3 node_decl: NODE . IDENTIFIER '{' node_decl_item_list '}'
    4          | NODE . IDENTIFIER '{' '}'

    IDENTIFIER  desplazar e ir al estado 8


Estado 3

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . node_decl

    $end        desplazar e ir al estado 9
    IDENTIFIER  desplazar e ir al estado 1
    NODE        desplazar e ir al estado 2

    node_decl  ir al estado 10


Estado 4

    1 translation_unit: node_decl .

    $default  reduce usando la regla 1 (translation_unit)


Estado 5

    6 colon_comma: ':' .

    $default  reduce usando la regla 6 (colon_comma)


Estado 6

    7 colon_comma: ',' .

    $default  reduce usando la regla 7 (colon_comma)


Estado 7

    5 node_decl: IDENTIFIER colon_comma . expression term_opt

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 29
    logical_xor_expression     ir al estado 30
    conditional_expression     ir al estado 31
    expression                 ir al estado 32


Estado 8

    3 node_decl: NODE IDENTIFIER . '{' node_decl_item_list '}'
    4          | NODE IDENTIFIER . '{' '}'

    '{'  desplazar e ir al estado 33


Estado 9

    0 $accept: translation_unit $end .

    $default  aceptar


Estado 10

    2 translation_unit: translation_unit node_decl .

    $default  reduce usando la regla 2 (translation_unit)


Estado 11

   12 primary_expression: IDENTIFIER .
   19 postfix_expression: IDENTIFIER . '(' argument_expression_list ')'
   20                   | IDENTIFIER . '(' ')'

    '('  desplazar e ir al estado 34

    $default  reduce usando la regla 12 (primary_expression)


Estado 12

   14 primary_expression: VARIABLE .

    $default  reduce usando la regla 14 (primary_expression)


Estado 13

   16 primary_expression: DOUBLE .

    $default  reduce usando la regla 16 (primary_expression)


Estado 14

   15 primary_expression: INTEGER .

    $default  reduce usando la regla 15 (primary_expression)


Estado 15

   27 unary_expression: LOGNOT . unary_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression  ir al estado 21
    postfix_expression  ir al estado 22
    unary_expression    ir al estado 35


Estado 16

   13 primary_expression: '@' . IDENTIFIER

    IDENTIFIER  desplazar e ir al estado 36


Estado 17

   17 primary_expression: '(' . expression ')'

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 29
    logical_xor_expression     ir al estado 30
    conditional_expression     ir al estado 31
    expression                 ir al estado 37


Estado 18

   24 unary_expression: '+' . unary_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression  ir al estado 21
    postfix_expression  ir al estado 22
    unary_expression    ir al estado 38


Estado 19

   25 unary_expression: '-' . unary_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression  ir al estado 21
    postfix_expression  ir al estado 22
    unary_expression    ir al estado 39


Estado 20

   26 unary_expression: '!' . unary_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression  ir al estado 21
    postfix_expression  ir al estado 22
    unary_expression    ir al estado 40


Estado 21

   18 postfix_expression: primary_expression .

    $default  reduce usando la regla 18 (postfix_expression)


Estado 22

   23 unary_expression: postfix_expression .

    $default  reduce usando la regla 23 (unary_expression)


Estado 23

   28 multiplicative_expression: unary_expression .

    $default  reduce usando la regla 28 (multiplicative_expression)


Estado 24

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   31 additive_expression: multiplicative_expression .

    '*'  desplazar e ir al estado 41
    '/'  desplazar e ir al estado 42

    $default  reduce usando la regla 31 (additive_expression)


Estado 25

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   34 relational_expression: additive_expression .

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44

    $default  reduce usando la regla 34 (relational_expression)


Estado 26

   35 relational_expression: relational_expression . '<' additive_expression
   36                      | relational_expression . '>' additive_expression
   37                      | relational_expression . LTEQ additive_expression
   38                      | relational_expression . GTEQ additive_expression
   39 equality_expression: relational_expression .

    GTEQ  desplazar e ir al estado 45
    LTEQ  desplazar e ir al estado 46
    '<'   desplazar e ir al estado 47
    '>'   desplazar e ir al estado 48

    $default  reduce usando la regla 39 (equality_expression)


Estado 27

   40 equality_expression: equality_expression . EQUAL relational_expression
   41                    | equality_expression . NOT_EQUAL relational_expression
   42 logical_and_expression: equality_expression .

    EQUAL      desplazar e ir al estado 49
    NOT_EQUAL  desplazar e ir al estado 50

    $default  reduce usando la regla 42 (logical_and_expression)


Estado 28

   43 logical_and_expression: logical_and_expression . LOGAND equality_expression
   44 logical_or_expression: logical_and_expression .

    LOGAND  desplazar e ir al estado 51

    $default  reduce usando la regla 44 (logical_or_expression)


Estado 29

   45 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   46 logical_xor_expression: logical_or_expression .

    LOGOR  desplazar e ir al estado 52

    $default  reduce usando la regla 46 (logical_xor_expression)


Estado 30

   47 logical_xor_expression: logical_xor_expression . LOGXOR logical_or_expression
   48                       | logical_xor_expression . '^' logical_or_expression
   49 conditional_expression: logical_xor_expression .
   50                       | logical_xor_expression . '?' expression ':' conditional_expression

    LOGXOR  desplazar e ir al estado 53
    '^'     desplazar e ir al estado 54
    '?'     desplazar e ir al estado 55

    $default  reduce usando la regla 49 (conditional_expression)


Estado 31

   51 expression: conditional_expression .

    $default  reduce usando la regla 51 (expression)


Estado 32

    5 node_decl: IDENTIFIER colon_comma expression . term_opt

    ';'  desplazar e ir al estado 56

    $default  reduce usando la regla 52 (term_opt)

    term_opt  ir al estado 57


Estado 33

    3 node_decl: NODE IDENTIFIER '{' . node_decl_item_list '}'
    4          | NODE IDENTIFIER '{' . '}'

    IDENTIFIER  desplazar e ir al estado 58
    '}'         desplazar e ir al estado 59

    node_decl_item_list  ir al estado 60
    node_decl_item       ir al estado 61


Estado 34

   19 postfix_expression: IDENTIFIER '(' . argument_expression_list ')'
   20                   | IDENTIFIER '(' . ')'

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    ')'         desplazar e ir al estado 62
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    argument_expression_list   ir al estado 63
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 29
    logical_xor_expression     ir al estado 30
    conditional_expression     ir al estado 64


Estado 35

   27 unary_expression: LOGNOT unary_expression .

    $default  reduce usando la regla 27 (unary_expression)


Estado 36

   13 primary_expression: '@' IDENTIFIER .

    $default  reduce usando la regla 13 (primary_expression)


Estado 37

   17 primary_expression: '(' expression . ')'

    ')'  desplazar e ir al estado 65


Estado 38

   24 unary_expression: '+' unary_expression .

    $default  reduce usando la regla 24 (unary_expression)


Estado 39

   25 unary_expression: '-' unary_expression .

    $default  reduce usando la regla 25 (unary_expression)


Estado 40

   26 unary_expression: '!' unary_expression .

    $default  reduce usando la regla 26 (unary_expression)


Estado 41

   29 multiplicative_expression: multiplicative_expression '*' . unary_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression  ir al estado 21
    postfix_expression  ir al estado 22
    unary_expression    ir al estado 66


Estado 42

   30 multiplicative_expression: multiplicative_expression '/' . unary_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression  ir al estado 21
    postfix_expression  ir al estado 22
    unary_expression    ir al estado 67


Estado 43

   32 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 68


Estado 44

   33 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 69


Estado 45

   38 relational_expression: relational_expression GTEQ . additive_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 70


Estado 46

   37 relational_expression: relational_expression LTEQ . additive_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 71


Estado 47

   35 relational_expression: relational_expression '<' . additive_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 72


Estado 48

   36 relational_expression: relational_expression '>' . additive_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 73


Estado 49

   40 equality_expression: equality_expression EQUAL . relational_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 74


Estado 50

   41 equality_expression: equality_expression NOT_EQUAL . relational_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 75


Estado 51

   43 logical_and_expression: logical_and_expression LOGAND . equality_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 76


Estado 52

   45 logical_or_expression: logical_or_expression LOGOR . logical_and_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 77


Estado 53

   47 logical_xor_expression: logical_xor_expression LOGXOR . logical_or_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 78


Estado 54

   48 logical_xor_expression: logical_xor_expression '^' . logical_or_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 79


Estado 55

   50 conditional_expression: logical_xor_expression '?' . expression ':' conditional_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 29
    logical_xor_expression     ir al estado 30
    conditional_expression     ir al estado 31
    expression                 ir al estado 80


Estado 56

   53 term_opt: ';' .

    $default  reduce usando la regla 53 (term_opt)


Estado 57

    5 node_decl: IDENTIFIER colon_comma expression term_opt .

    $default  reduce usando la regla 5 (node_decl)


Estado 58

   10 node_decl_item: IDENTIFIER . '=' expression ';'
   11               | IDENTIFIER . '=' STRING ';'

    '='  desplazar e ir al estado 81


Estado 59

    4 node_decl: NODE IDENTIFIER '{' '}' .

    $default  reduce usando la regla 4 (node_decl)


Estado 60

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list . '}'
    9 node_decl_item_list: node_decl_item_list . node_decl_item

    IDENTIFIER  desplazar e ir al estado 58
    '}'         desplazar e ir al estado 82

    node_decl_item  ir al estado 83


Estado 61

    8 node_decl_item_list: node_decl_item .

    $default  reduce usando la regla 8 (node_decl_item_list)


Estado 62

   20 postfix_expression: IDENTIFIER '(' ')' .

    $default  reduce usando la regla 20 (postfix_expression)


Estado 63

   19 postfix_expression: IDENTIFIER '(' argument_expression_list . ')'
   22 argument_expression_list: argument_expression_list . ',' conditional_expression

    ','  desplazar e ir al estado 84
    ')'  desplazar e ir al estado 85


Estado 64

   21 argument_expression_list: conditional_expression .

    $default  reduce usando la regla 21 (argument_expression_list)


Estado 65

   17 primary_expression: '(' expression ')' .

    $default  reduce usando la regla 17 (primary_expression)


Estado 66

   29 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  reduce usando la regla 29 (multiplicative_expression)


Estado 67

   30 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  reduce usando la regla 30 (multiplicative_expression)


Estado 68

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   32 additive_expression: additive_expression '+' multiplicative_expression .

    '*'  desplazar e ir al estado 41
    '/'  desplazar e ir al estado 42

    $default  reduce usando la regla 32 (additive_expression)


Estado 69

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   33 additive_expression: additive_expression '-' multiplicative_expression .

    '*'  desplazar e ir al estado 41
    '/'  desplazar e ir al estado 42

    $default  reduce usando la regla 33 (additive_expression)


Estado 70

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   38 relational_expression: relational_expression GTEQ additive_expression .

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44

    $default  reduce usando la regla 38 (relational_expression)


Estado 71

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   37 relational_expression: relational_expression LTEQ additive_expression .

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44

    $default  reduce usando la regla 37 (relational_expression)


Estado 72

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   35 relational_expression: relational_expression '<' additive_expression .

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44

    $default  reduce usando la regla 35 (relational_expression)


Estado 73

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   36 relational_expression: relational_expression '>' additive_expression .

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44

    $default  reduce usando la regla 36 (relational_expression)


Estado 74

   35 relational_expression: relational_expression . '<' additive_expression
   36                      | relational_expression . '>' additive_expression
   37                      | relational_expression . LTEQ additive_expression
   38                      | relational_expression . GTEQ additive_expression
   40 equality_expression: equality_expression EQUAL relational_expression .

    GTEQ  desplazar e ir al estado 45
    LTEQ  desplazar e ir al estado 46
    '<'   desplazar e ir al estado 47
    '>'   desplazar e ir al estado 48

    $default  reduce usando la regla 40 (equality_expression)


Estado 75

   35 relational_expression: relational_expression . '<' additive_expression
   36                      | relational_expression . '>' additive_expression
   37                      | relational_expression . LTEQ additive_expression
   38                      | relational_expression . GTEQ additive_expression
   41 equality_expression: equality_expression NOT_EQUAL relational_expression .

    GTEQ  desplazar e ir al estado 45
    LTEQ  desplazar e ir al estado 46
    '<'   desplazar e ir al estado 47
    '>'   desplazar e ir al estado 48

    $default  reduce usando la regla 41 (equality_expression)


Estado 76

   40 equality_expression: equality_expression . EQUAL relational_expression
   41                    | equality_expression . NOT_EQUAL relational_expression
   43 logical_and_expression: logical_and_expression LOGAND equality_expression .

    EQUAL      desplazar e ir al estado 49
    NOT_EQUAL  desplazar e ir al estado 50

    $default  reduce usando la regla 43 (logical_and_expression)


Estado 77

   43 logical_and_expression: logical_and_expression . LOGAND equality_expression
   45 logical_or_expression: logical_or_expression LOGOR logical_and_expression .

    LOGAND  desplazar e ir al estado 51

    $default  reduce usando la regla 45 (logical_or_expression)


Estado 78

   45 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   47 logical_xor_expression: logical_xor_expression LOGXOR logical_or_expression .

    LOGOR  desplazar e ir al estado 52

    $default  reduce usando la regla 47 (logical_xor_expression)


Estado 79

   45 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   48 logical_xor_expression: logical_xor_expression '^' logical_or_expression .

    LOGOR  desplazar e ir al estado 52

    $default  reduce usando la regla 48 (logical_xor_expression)


Estado 80

   50 conditional_expression: logical_xor_expression '?' expression . ':' conditional_expression

    ':'  desplazar e ir al estado 86


Estado 81

   10 node_decl_item: IDENTIFIER '=' . expression ';'
   11               | IDENTIFIER '=' . STRING ';'

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    STRING      desplazar e ir al estado 87
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 29
    logical_xor_expression     ir al estado 30
    conditional_expression     ir al estado 31
    expression                 ir al estado 88


Estado 82

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list '}' .

    $default  reduce usando la regla 3 (node_decl)


Estado 83

    9 node_decl_item_list: node_decl_item_list node_decl_item .

    $default  reduce usando la regla 9 (node_decl_item_list)


Estado 84

   22 argument_expression_list: argument_expression_list ',' . conditional_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 29
    logical_xor_expression     ir al estado 30
    conditional_expression     ir al estado 89


Estado 85

   19 postfix_expression: IDENTIFIER '(' argument_expression_list ')' .

    $default  reduce usando la regla 19 (postfix_expression)


Estado 86

   50 conditional_expression: logical_xor_expression '?' expression ':' . conditional_expression

    IDENTIFIER  desplazar e ir al estado 11
    VARIABLE    desplazar e ir al estado 12
    DOUBLE      desplazar e ir al estado 13
    INTEGER     desplazar e ir al estado 14
    LOGNOT      desplazar e ir al estado 15
    '@'         desplazar e ir al estado 16
    '('         desplazar e ir al estado 17
    '+'         desplazar e ir al estado 18
    '-'         desplazar e ir al estado 19
    '!'         desplazar e ir al estado 20

    primary_expression         ir al estado 21
    postfix_expression         ir al estado 22
    unary_expression           ir al estado 23
    multiplicative_expression  ir al estado 24
    additive_expression        ir al estado 25
    relational_expression      ir al estado 26
    equality_expression        ir al estado 27
    logical_and_expression     ir al estado 28
    logical_or_expression      ir al estado 29
    logical_xor_expression     ir al estado 30
    conditional_expression     ir al estado 90


Estado 87

   11 node_decl_item: IDENTIFIER '=' STRING . ';'

    ';'  desplazar e ir al estado 91


Estado 88

   10 node_decl_item: IDENTIFIER '=' expression . ';'

    ';'  desplazar e ir al estado 92


Estado 89

   22 argument_expression_list: argument_expression_list ',' conditional_expression .

    $default  reduce usando la regla 22 (argument_expression_list)


Estado 90

   50 conditional_expression: logical_xor_expression '?' expression ':' conditional_expression .

    $default  reduce usando la regla 50 (conditional_expression)


Estado 91

   11 node_decl_item: IDENTIFIER '=' STRING ';' .

    $default  reduce usando la regla 11 (node_decl_item)


Estado 92

   10 node_decl_item: IDENTIFIER '=' expression ';' .

    $default  reduce usando la regla 10 (node_decl_item)
